{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation for CLARA","text":"<p>Hello, documentation!</p>"},{"location":"aggregation/","title":"Aggregation","text":""},{"location":"aggregation/platforms/kubernetes/dns/","title":"DNS","text":"<p>CLARA can analyze the logs of CoreDNS (the default Kubernetes DNS server) to discover communication of components via DNS queries. For that feature to work correctly, it is crucial that the DNS server is configured to log DNS queries by enabling the <code>log</code> plugin.</p> An exampple ConfigMap for CoreDNS with the 'log' plugin enabled<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: coredns\n  namespace: kube-system\ndata:\n  Corefile: |\n    .:53 {\n        log\n        errors\n        health\n        ready\n        kubernetes cluster.local in-addr.arpa ip6.arpa {\n          pods insecure\n          fallthrough in-addr.arpa ip6.arpa\n        }\n        prometheus :9153\n        forward . /etc/resolv.conf\n        cache 30\n        loop\n        reload\n        loadbalance\n    }\n</code></pre>"},{"location":"aggregation/platforms/kubernetes/dns/#managed-kubernetes-cluster","title":"Managed Kubernetes cluster","text":"<p>Using a managed Kubernetes cluster from a service provider</p> <p>When using a managed cluster from a service provider, changes to core components of Kubernetes might be not allowed directly. Please consult the documentation of your respective provider.</p>"},{"location":"aggregation/platforms/kubernetes/dns/#digitalocean","title":"DigitalOcean","text":"<p>For DigitalOcean, the correct way of enabling logging is to create a special ConfigMap:</p> ConfigMap to activate query logging for CoreDNS in a Kubernetes cluster managed by DigitalOcean<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: coredns-custom\n  namespace: kube-system\ndata:\n  log.override: |\n    log\n</code></pre>"},{"location":"aggregation/platforms/kubernetes/dns/#dns-debugging","title":"DNS debugging","text":"<p>As described in the Kubernetes Documentation, you can use dnsutils to debug DNS resolution. For CLARA, this is also a simple way of creating DNS queries explicitly and checking if CLARA detects the communication. Just create a dnsutils-pod with the following manifest:</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: dnsutils\n  namespace: default\nspec:\n  containers:\n    - name: dnsutils\n      image: registry.k8s.io/e2e-test-images/jessie-dnsutils:1.7\n      command:\n        - sleep\n        - \"infinity\"\n      imagePullPolicy: IfNotPresent\n  restartPolicy: Always\n</code></pre> <p>Then you can use the following command to execute DNS queries:</p> <pre><code>kubectl exec -it dnsutils -n default -- nslookup google.com\n</code></pre> <p>Execute the following command to check the DNS server logs:</p> <pre><code>kubectl logs -l k8s-app=kube-dns -n kube-system\n</code></pre>"},{"location":"concept/","title":"Concept","text":""},{"location":"configuration/","title":"Configuration","text":"<p>The typical configuration for CLARA is in the YAML format. Below, each available option is explained. All options with a default value are optional.</p> <p>Sensitive Information &amp; Environment Variables</p> <p>Sensitive information, like usernames and passwords, don't belong into configuration files! For that reason, each configuration option can be specified by an environment variable. Instead of the actual value, the BASH-like syntax <code>${NAME_OF_THE_ENV_VARIABLE}</code> can be used to specify the environment variable.</p> <p>Interpolation and specifying default values is possible as well, just have a look here! There you can also find other ways to set up the configuration to be effective, like referencing and substituting other parts of the configuration to make it more DRY.</p>"},{"location":"configuration/#general-configuration-options","title":"General configuration options","text":"app.log-config <ul> <li>Type: Boolean</li> <li>Default: false</li> <li>Description: Whether the whole configuration that CLARA will use should be logged at startup (at the info-level).</li> </ul> app.block-after-finish <ul> <li>Type: Boolean</li> <li>Default: false</li> <li>Description: Whether the CLARA process should keep running after all exports are finished.   This is useful when CLARA itself is running e.g. in Kubernetes and the Pod should not terminate because of the automatic restarts.</li> </ul>"},{"location":"configuration/#configuring-the-aggregation","title":"Configuring the aggregation","text":""},{"location":"configuration/#platform-kubernetes","title":"Platform: Kubernetes","text":"aggregation.platforms.kubernetes.include-kube-namespaces <ul> <li>Type: Boolean</li> <li>Default: false</li> <li>Description: Whether the namespaces with the <code>kube</code>-prefix should also get scanned by CLARA.   Must be set to true when every namespace should be scanned, even when namespaces has the <code>*</code>-wildcard.</li> </ul> aggregation.platforms.kubernetes.namespaces <ul> <li>Type: List of Strings</li> <li>Default: empty List</li> <li>Description: List all namespaces which CLARA should scan.   To just scan all namespaces (except the <code>kube</code>-namespaces) set just the <code>*</code>-wildcard as the only element.   The <code>*</code> needs to be in quotes.</li> </ul>"},{"location":"configuration/#aggregator-pod-optional","title":"Aggregator: Pod (optional)","text":"aggregation.platforms.kubernetes.aggregators.pod.enable <ul> <li>Type: Boolean</li> <li>Default: true</li> <li>Description: Simple way to disable this aggregator without removing all of its associated configuration.</li> </ul>"},{"location":"configuration/#aggregator-service-optional","title":"Aggregator: Service (optional)","text":"aggregation.platforms.kubernetes.aggregators.service.enable <ul> <li>Type: Boolean</li> <li>Default: true</li> <li>Description: Simple way to disable this aggregator without removing all of its associated configuration.</li> </ul>"},{"location":"configuration/#aggregator-dns-optional","title":"Aggregator: DNS (optional)","text":"aggregation.platforms.kubernetes.aggregators.dns.enable <ul> <li>Type: Boolean</li> <li>Default: true</li> <li>Description: Simple way to disable this aggregator without removing all of its associated configuration.</li> </ul> aggregation.platforms.kubernetes.aggregators.dns.logs-since-time <ul> <li>Type: String (formatted as RFC3339, like <code>2024-01-01T00:00:00Z</code>)</li> <li>Default: empty String</li> <li>Description: The DNS aggregator works by analyzing the logs of the Kubernetes DNS server which must be configured to log the queries.   This option defines how recent the logs must be to be considered by CLARA.   If this option is just an empty String (the default), all available logs will be used, which can lead to unwanted side effects, like old logs from a previous version of the deployment polluting the recovered architecture.</li> </ul>"},{"location":"configuration/#aggregator-opentelemetry-optional","title":"Aggregator: OpenTelemetry (optional)","text":"aggregation.platforms.kubernetes.aggregators.open-telemetry.enable <ul> <li>Type: Boolean</li> <li>Default: true</li> <li>Description: Simple way to disable this aggregator without removing all of its associated configuration.</li> </ul> aggregation.platforms.kubernetes.aggregators.open-telemetry.listen-port <ul> <li>Type: Integer (must be a valid port number)</li> <li>Description: The port CLARA will listen to incoming spans sent by an OpenTelemetry collector.</li> </ul> aggregation.platforms.kubernetes.aggregators.open-telemetry.listen-duration <ul> <li>Type: String (format here)</li> <li>Description: Amount of time CLARA should listen to incoming spans sent by an OpenTelemetry collector.</li> </ul>"},{"location":"configuration/#configuring-the-export","title":"Configuring the export","text":"export.on-empty <ul> <li>Type: Boolean</li> <li>Default: false</li> <li>Description: If <code>true</code>, CLARA will export the recovered using the enabled exporters, even if the architecture is completely empty.   This could be useful for debugging purposes.</li> </ul>"},{"location":"configuration/#exporter-graphviz-optional","title":"Exporter: GraphViz (optional)","text":"export.exporters.graphviz.enable <ul> <li>Type: Boolean</li> <li>Default: true</li> <li>Description: Simple way to disable this exporter without removing all of its associated configuration.</li> </ul> export.exporters.graphviz.output-type <ul> <li>Type: String (Output Formats supported by GraphViz)</li> <li>Description: Although all GraphViz output formats can be specified, <code>svg</code> is known to work best.</li> </ul> export.exporters.graphviz.output-file <ul> <li>Type: String</li> <li>Description: The file location (absolute or relative path) of the GraphViz output.</li> </ul>"},{"location":"configuration/#exporter-gropius-optional","title":"Exporter: Gropius (optional)","text":"export.exporters.gropius.enable <ul> <li>Type: Boolean</li> <li>Default: true</li> <li>Description: Simple way to disable this exporter without removing all of its associated configuration.</li> </ul> export.exporters.gropius.project-id <ul> <li>Type: String</li> <li>Description: The ID of the Gropius-project to export the recovered architecture to.</li> </ul> export.exporters.gropius.graphql-backend-url <ul> <li>Type: String (a valid URL)</li> <li>Description: The URL where CLARA can interact with the GraphQL-API of Gropius.</li> </ul> export.exporters.gropius.graphql-backend-authentication export.exporters.gropius.graphql-backend-authentication.authentication-url <ul> <li>Type: String (a valid URL)</li> <li>Description: The URL where CLARA can obtain an authentication token from the Gropius-backend via username and password.</li> </ul> export.exporters.gropius.graphql-backend-authentication.username <ul> <li>Type: String</li> <li>Description: The username for obtaining an authentication token.</li> </ul> export.exporters.gropius.graphql-backend-authentication.password <ul> <li>Type: String</li> <li>Description: The password for obtaining an authentication token.</li> </ul> export.exporters.gropius.graphql-backend-authentication.client-id <ul> <li>Type: String</li> <li>Description: The OAuth client ID for obtaining an authentication token.</li> </ul>"},{"location":"configuration/#a-full-example-config","title":"A full example config","text":"<pre><code>app:\n  log-config: true\n  block-after-finish: false\n\naggregation:\n  platforms:\n    kubernetes:\n      include-kube-namespaces: false\n      namespaces:\n        - abc\n        - xyz\n      aggregators:\n        pod:\n          enable: true\n        service:\n          enable: true\n        dns:\n          enable: true\n          logs-since-time: 2024-02-01T00:00:00Z\n        open-telemetry:\n          enable: true\n          listen-port: 7878\n          listen-duration: 45 minutes\n\nexport:\n  on-empty: false\n  exporters:\n    graphviz:\n      enable: true\n      output-type: svg\n      output-file: generated/architecture.svg\n    gropius:\n      enable: true\n      project-id: aaaaaaaa-1111-bbbb-2222-cccccccccccc\n      graphql-backend-url: http://my.backend.com:8080/graphql\n      graphql-backend-authentication:\n        authentication-url: http://my.backend.com:3000/authenticate/oauth/xxxxxxxx-1111-yyyy-2222-zzzzzzzzzzzz/token\n        username: ${CLARA_GROPIUS_GRAPHQL_USERNAME}\n        password: ${CLARA_GROPIUS_GRAPHQL_PASSWORD}\n        client-id: ${CLARA_GROPIUS_GRAPHQL_CLIENT_ID}\n</code></pre>"},{"location":"export/","title":"Export","text":""},{"location":"export/gropius/","title":"Gropius export","text":""},{"location":"export/svg/","title":"SVG export","text":""},{"location":"validation/t2-reference-architecture/","title":"T2-Reference-Architecture","text":"<p>CLARA will be evaluated against the T2-Microservice-Reference-Architecture.</p>"},{"location":"validation/t2-reference-architecture/#setup","title":"Setup","text":"<p>Follow the deployment instructions from the documentation. </p>"}]}